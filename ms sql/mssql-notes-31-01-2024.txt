Class-1: Theory 
---------------
what? Microsoft SQL Server(Database management software) - SQL (Structured query language)
why?  SQL - It is the very core/ fundamental language in software industery 
how?  morning batch - 2hr - 24hr live class - 1hr - 10min - 40-45min - QnA - QnA - 

DBMS - MS-SQL Server, Oracle, DB2, MySQL, Postgres etc. 



Application Layer: 
User Interface - HTML, CSS
Applicatation layer - c#, java
Database layer - SQL



Client Server Architecture - Google, Facebook, insta, Amazon, YouTube 
OLTP - Online Transaction Protocol 

-- What is client server architecture? 
-- What is data consistency? 

-- Command types:
DQL, DDL, DML, DCL

file-1:      'My name is Rahul, my age is 20'
file-1-Copy: 'My name is Rahul, my age is 20'


person(ID, Name, Age)
1, Priya, 25
2, Trimala, 26
3, Mahesh, 26


1 --> 25
2 --> 26
3 --> 26

2 --> 26/27

DBMS -- server name
Databases
Tables
Data




Name: Trupti 


User1- What is the name of studentid - 10? Trupti
User2- What is the name of studentid - 10? Sarada


-- What is normalization? 
Technique to minimize data duplication and increase logical consistency. 

-- Why to perform normalization? 
Remove redundancy from database tables
Maintain consistency and integrity

-- What is consistency? 
there should not be any data mismatch between different acess. 

-- what is integrity? 
If the data is consistent that means the table maintainded its integrity.  

anomalies without nornalization?
Redundency, Insert,update,delete anomalies

Person(SSN, Name, Age, Address)
SSN --> Name










-- Thursday Class M1.2 P13




-- what is dependency? 
It is the logical relation between two columns in a table. 


-- Funtional dependency:
A cell value in a row can uniquely determine the other cell values of the same row


-- Functional dependency 
A --> B If for the value of A there is a unique value of B
a1 --> b1
a1 --> b2
Here for the value of A as a1 we are not getting unique value of B 
as there two values of B as b1 and b2


Person(PID, PName, PAge)
1, Raj, 10
2, Riya, 20
3, Nita, 10
4, Rohit, 15

Raj --> 10
Nita --> 10

1 --> 10
3 --> 10

4 --> 15
4 --> 20


-- Full Functional dependency 
Student(roll_num, Name, course_id, Subject, Grade)

roll_num, course_id --> grade 
(1, CSE301) --> A
(1, CSE306) --> C
(2, CSE301) --> B
(2, CSE306) --> A
(3, CSE316) --> C




Roll_num, Subject --> Grade
(1, DBMS) --> A
(1, DS)   --> C
(2, DBMS) --> B
(2, DS)   --> A
(3, AI)   --> C

-- Partial Functional dependency 
Employee(emp_id, emp_name, emp_Age, emp_contact, Manager)


emp_id --> emp_name, emp_Age, emp_contact, Manager
emp_id,emp_name --> emp_Age, emp_contact, Manager
emp_id, emp_name, emp_Age --> emp_contact, Manager

emp_id, emp_name --> Manager
emp_id --> emp_name, Manager

Table(A,B,C,D,E)
A --> B,C,D,E
A,B --> C,D,E
A,B,C --> D,E




-- A candidate key is a super key but the opposit is not true. 

-- Super Key: A superkey is a combination of columns that uniquely identifies any row within a table.
-- Candidate Key: A Candidate key is a subset of Super key without any unnecessary attributes for uniquely identifying rows.
-- Prime attribute: An attribute that is a part of one of the candidate keys is known as prime attribute.
-- Non Prime attribute: An attribute that is not part of the candidate keys is known as non prime attribute.

Note: All the candidate keys are super key but all the super keys are not candidate keys. 










Class-2: Theory 
---------------------------------

-- Transative Functional Dependency 
PersonDetails(ID, Name, Age, AreaCode, Street, City)
ID --> AreaCode
AreaCode --> City
ID --> City


EmployeeDetails(EID, E_Name, Department, Base_Location)

EID --> Department
Department --> Base_Location
EID --> Base_Location

a --> b
a --> b
a --> b

-- Multivalued Functional Depedency: (Special case)
When there are more than one independent multivalued attribute in a table. 
Example:
PersonDetails(ID, Name, Age, country, nationality)
1, raj, India, Indian
2, Bob, US, American 
3, Puja, India, Indian
4, Liza, US, American 


country --> nationality
India --> Indian
US --> American 


Model --> --> Year







-- Decomposition

-- Loss less join decomposition 
Table(a,b,c,d,e,f,g,h)
Table1(a,b,c,d)
Table2(e,f,g,h)
Table = Table1 U Table2


Student(SID, SName, SAge, SAddress, SContact)
Student1(SID, SName, SAge)
Student2(SID, SAddress, SContact)

Student = Student1 U Student2 


-- Dependency preserving decomposition 

Table(a,b,c,d,e,f)
a --> bc
d --> ef

Table1(a,b,c)
Table2(d,e,f) 

Table1 U Table2
a --> bc
d --> ef

-- If the related columns of any functional dependency present is a table then only we can retain the dependency 

PersonDetails(ID, Name, Age, AreaCode, Street, City)
ID --> Name, Age
AreaCode --> Street, City

PersonDetails1 (ID, Name, Age)
PersonDetails2 (AreaCode, Street, City)

PersonDetails = PersonDetails1 U PersonDetails2


PersonDetails(ID, Name, Age, AreaCode, Street, City)
              ID, Name, Age, AreaCode, Street, City
ID --> Name, Age

PersonDetails1 (ID, Name, Age)
PersonDetails2 (AreaCode, Street, Age)
PersonDetails3 (ID, City)

Dependency Preserving Decomposition --> PersonDetails1
Loss less join decomposition --> met






lossless join decomposition --> All the columns should be preserved in the sub tables
Dependency preserving decomposition --> All the funtional dependencies should be preserved 

-- decompose student table into two sub tables using lossless join decomposition technique 
Student(SID, S_Name, S_Age, S_Address, S_Contact, S_Gender)

Student1(SID, S_Name, S_Age)
Student2(SID, S_Address, S_Contact, S_Gender)


-- decompose student table into two sub tables using dependency preserving technique 
Student(SID, S_Name, S_Age,  S_Gender, S_AreaCode, S_Address, S_City)

SID --> S_Name, S_Age,  S_Gender
S_AreaCode --> S_Address, S_City

Student1(SID, S_Name, S_Age,  S_Gender, S_City)
Student2(SID, S_AreaCode, S_Address, S_City)


Student1(SID, S_Name, S_Age)
1, Anushka, 25
3, Prince, 26
2, Roland, 28





---------------------------Normalization---------------------------------
-- What is normalization? 
Technique to minimize data duplication and increase logical consistency. 

-- Why to perform normalization? 
Remove redundancy from database
Maintain consistency and integrity 



Person(ID, Name, Age)
1, Raj, 20



-- First Normal Form:
Rule-1: Single valued columns
Rule-2: same kind of data in each column
Rule-3: All column name should be unique
Rule-4: FYI - Row/ Column order does not matter

-- Second Normal Form:
Rule-1: Table should follow first normal form
Rule-2: No partial depedency in a table


-- Third Normal Form:
Rule-1: Table should follow second normal form
Rule-2: No transative dependency in the table

roll --> pin
pin --> state, city, district 

roll --> state, city, district (remove)





RDBMS --> Relational Database Management System 
online food delivery app:
customer(cid, cname, ccontact)
order(oid, oname, oprice,cid)


-- BCNF: Boyce - Codd Normal Form (Extension of third Normal Form)
Rule-1: Table should follow third normal form
Rule-2: For X->Y, X should be the candidate key of the table
	: Key column of a table should be determining all other columns of the table


-- Forth Normal Form:
Rule-1: Table should follow BCNF
Rule-2: Table should not have multi valued depedency. 


eid, cert, hobby

1, java, music
1, java, Dance
1, java, Writing, 
1, java, Books

eid --> cert (multivalued dependency)

Table1(eid, cert)
1, java

Table2(eid, hobby)
1, music
1, Dance
1, Writing
1, books






************************ Table Structures *********************************
CREATE TABLE [dbo].[Person]
(
	[PID] [int] NOT NULL PRIMARY KEY,
	[Name] [varchar](32) NOT NULL,
	[Address] [varchar](64) NOT NULL,
	[MobileNumber] [int] NOT NULL,
	[DOB] [date] NULL,
	[BloodGroup] [varchar](4) NULL
)

CREATE TABLE [dbo].[CustomerDetails]
(
	[C_ID] [int] NOT NULL PRIMARY KEY,
	[C_Name] [varchar](48) NOT NULL,
	[C_Address] [varchar](64) NOT NULL,
	[C_Mobile] [int] NOT NULL,
	[C_Age] [int] NULL,
)

CREATE TABLE [dbo].[Employee]
(
	[ID] [int] NOT NULL PRIMARY KEY,
	[Name] [varchar](64) NOT NULL,
	[Salary] [int] NOT NULL,
	[Age] [int] NOT NULL,
	[Gender] [varchar](16) NULL,
	[Dept] [varchar](50) NULL
)

CREATE TABLE [dbo].[Department]
(
	[ID] [int] NOT NULL PRIMARY KEY,
	[Name] [varchar](50) NOT NULL,
	[Location] [varchar](50) NOT NULL
)

CREATE TABLE [dbo].[CustomerDetails]
(
	[CID] [int] NOT NULL PRIMARY KEY,
	[Name] [varchar](64) NOT NULL,
	[Age] [int] NOT NULL,
	[Mobile] [varchar](12) NOT NULL
)

CREATE TABLE [dbo].[OrderDetails]
(
	[OID] [int] NOT NULL PRIMARY KEY,
	[Item] [varchar](32) NOT NULL,
	[Amount] [int] NOT NULL,
	[Notes] [varchar](256) NULL,
	[CID] [int] NOT NULL
)
***********************************************************************







Class-3: Practicals 
--------------------------

-- Hotel management
-- problem statement 
-- requirement gathering 
-- requirement analysis 
-- design / database design --> ER Diagram 
-- database implementation
-- test
-- stage
-- feedback



"Server Software": SQL Server Software -- SQL Service is created in OS services page
We need a "client software" who can communicate with the "server software"
"client software": SSMS/SQL Server Management Studio

client server model 
client software -- SQL Server Management Studio (SSMS)
server software -- Microsoft SQL Server (DBMS)



Example: 
 Chrome browser     --> SSMS
 www.Google.com     --> Instance Name
 Serching in google --> Programming in SQL


Instance Name: Hostname \ Service Name
Instance Name: Hostname



-- this is a comment line 
/*
This 
is
multiple
comment 
line
syntax
*/

-- SQL programming language is case insencitive 
create database TestDatabase -- command to create a new database
Use AdventureWorks                    -- command to change the database connection 
DROP DATABASE TestDatabase   -- command to drop a database

system databases -- below 4 databases are dedicated for SQL use
-- no user can store information in the system databases. 
master -- it holds all instance specific information
model  -- it is the template of a new blank database
msdb   -- it holds all SQL job related information
tempdb -- holds temporary data of user databases

-- server/ database software
-- database
-- tables
-- data


-- NULL: NULL is a special charected that denotes not having any value 
-- Unique Constraint: Distinct values + NULL is allowed 
-- Primary Key Constraint: Not Null + Unique (Candidate Key)


CREATE TABLE Employee
(
ID  int not null Primary Key,
Name varchar(32) not null,
Age tinyint null
)

-- please store the information of employee
create table dbo.EmployeeDetails
(
E_ID int not null, 
Name varchar(64) not null, 
Age tinyint null, 
Gender varchar(1) not null, 
City varchar(24) not null, 
Salary int not null, 
Contact varchar(12)
)



-- Zomato
Customer(C_ID, C_Name, C_Address, C_Phone)
1, abc, xyz, 123
2, def, ynx, 456
3, ghi, pko, 789

Orders(O_ID, O_Item, O_Status, O_Amount, C_ID)
1, rice, preparing, 50, 4






Create Table Person
(
PID INT NOT NULL, 
Name varchar(32) NOT NULL, 
Address varchar(64) NOT NULL, 
DOB Date NULL, 
Primary Key(PID)
)

insert into person (pid, name, address, dob)
values(1,'Mahesh', 'Pune', '2000-01-15')
insert into person 
values(2,'Asma', 'Mumbai', '2002-02-10')
insert into person 
values
(3,'Nadaf', 'Kolkata', '2005-02-10'),
(4,'Amit', 'Goa', NULL),
(5,'Ekwulu', 'Ranchi', '2002-02-10'),
(6,'Asma', 'Pune', NULL)
insert into person (pid, name, address)
values(7,'Asma', 'Pune')



select -- stating that we want to see the data
pid, name -- I want to see all the columns of the table
from   -- is stating from where I want to see the data
person -- is the table name or data source 

-- single line comment 

/*
For
multi
line 
comment 
*/

select * from person 

select pid, name, address from person 












-- Tuesday class (Weekday Batch) - M2P20

-- Live Assignment: 
-- table structure - EmployeeDetails(E_ID, E_Name, E_Address, E_Age)

-- please write the SQL query to create the table 
-- Write a sigle SQL query to insert 5 records at a single run

create table EmployeeDetails
(
E_Id int,
E_Name varchar(32),
E_Address varchar(64),
E_age int
)

INSERT INTO EmployeeDetails(E_ID,E_Name, E_Address, E_Age) 
VALUES
  (1, 'Dave', 'Pune', 20),
  (2, 'Disha', 'Mumbai', 31),
  (3, 'Tom', 'Delhi', 45),
  (4, 'Liza', 'Thane', 23),
  (5, 'Harry', 'Aurangabad', 36)

 select * from EmployeeDetails


-- I want to see person details where address is Goa
select * from person where address = 'Goa' 

-- I want to see person details where address is kolkata and blood group is O+
select * from person where address = 'Kolkata' AND bloodgroup = 'O+'

-- I want to see person details where id is less than 5
select * from person where pid < 5


-- AND operator
-- show me the O+ blood group person details present in kolkata location
select * from person where Address = 'Kolkata'
select * from person where BloodGroup = 'O+'
select * from person where Address = 'Kolkata' AND BloodGroup = 'O+' AND PID < 10


-- OR operator
-- show me the person details if the person is from goa OR the person is O+
select * from person where Address = 'goa'
select * from person where BloodGroup = 'O+'
select * from person where Address = 'Goa' OR BloodGroup = 'O+' 

AND:
True AND True --> Eligible for output 

OR:
True OR False --> Eligible for output 
False OR True --> Eligible for output 
True OR True  --> Eligible for output 
select * from person where PID < 5 OR BloodGroup = 'O+' 

-- More examples: 
select * from dbo.Person where PID  between 2 and 5 
select * from dbo.Person where BloodGroup  between 'a+' and 'B+' 
select * from dbo.Person where PID >= 2 AND PID <= 5

-- Not operator
select * from person where address = 'Kolkata'
select * from person where NOT address = 'Kolkata'
select * from person where address <> 'Kolkata'
select * from person where address != 'Kolkata'


select * from dbo.Person where Address = 'Kolkata'
select * from dbo.Person where BloodGroup = 'A+'
select * from dbo.Person where PID = 10
select * from dbo.Person where Address = 'Kolkata' AND BloodGroup = 'O+'
select * from dbo.Person where Address = 'Kolkata' OR BloodGroup = 'A+'
select * from dbo.Person where BloodGroup <> 'A+'
select * from dbo.Person where BloodGroup != 'A+'


-- not having any value can be represented using a special character: NULL 
select * from Person where DOB IS NULL 
select * from Person where DOB IS NOT NULL 
select * from Person where BloodGroup IS NULL 
select * from Person where BloodGroup IS NOT NULL 
select * from Person where DOB IS NULL AND BloodGroup IS NULL



-- Live Assignment: 

-- table structure 
EmployeeDetails(E_ID, E_Name, E_Address, E_Age)

-- please write the SQL query to create the table where E_ID will be the PK
-- Write a sigle SQL query to insert 5 records at a single run
-- show employee details for only aged below 40

-- please write the SQL query to create the table where E_ID will be the PK
CREATE TABLE EmployeeDetails
(
E_ID int not null PRIMARY KEY,
E_Name varchar(64) not null,
E_Address varchar(256) not null,
E_Age tinyint null
)

-- Write a sigle SQL query to insert 5 records at a single run
INSERT INTO EmployeeDetails VALUES
(1,'SANTHOSH','KOLKATA',43),
(2,'THAMAN','CHENNAI',26),
(3,'HARSH','BANGALORE',40),
(4,'SAMHITH','DELHI',26),
(5,'SAMARTH','KANPUR',24)

-- show employee details for only aged below 40
select * from EmployeeDetails where E_Age < 40 




Class-4: Practicals M2 P30
-----------------------------

-- Like operator: 
select * from dbo.Person where name LIKE 'a%'
select * from dbo.Person where BloodGroup like 'a%'
select * from dbo.Person where Name like '%a'
select * from dbo.Person where Name like '%a%'
select * from dbo.Person where DOB like '1995-%'

select * from dbo.Person where MobileNumber like '%4_'

-- what if we have to search '%' charecter in like command
select * from dbo.Person where name like '%[%]%'

select * from dbo.Person where Name like '''%'
-- to use ' as a string charecter, we need to use '' 


-- In / Not In Operator:
select * from dbo.Person where BloodGroup IN ('AB+', 'O+', 'B+') 
select * from dbo.Person where BloodGroup NOT IN ('AB+', 'O+', 'B+') 

-- Between Operator:
-- show me the employee details getting salary between 5000 to 8000
select * from employee where salary between 5000 and 8000 

-- show me the employee details where age is between 25 to 30
select * from employee where age between 25 and 30 -- 25 <= age AND  age <= 30

-- fulfil the requirement without using between operator
select * from employee where 25 <= age AND  age <= 30


-- Distinct Operator:
-- show me only the available bloodgroups in the person table
select distinct bloodgroup from person 
select distinct bloodgroup from person where BloodGroup IS NOT NULL 

-- show me the different address available in person table 
select distinct Address from person 















-- Update a single value
-- update the age of employeeid 1
update employeedetails
set E_age = 40
where e_id = 1

-- update multiple values 
-- if the age is 26 then please update it as 30
update employeedetails
set e_age  = 45
where e_age = 40 


update employeedetails
set e_name = 'Thaman', E_address = 'Chennai'
where e_id = 2

update employeedetails
set e_age = 35
where e_age in (30,24)


update student
set age = 20
where id = 5

-- Update DOB for ID 5, with the value of '2008-09-10'
update student 
set DOB = '2008-06-09' 
where Id=5
GO
-- Update multiple column of a row
update student 
set age = 23, DOB = '2000-06-09', Address = 'Kolkata'
where Id=5

-- update student address as 'Mumbai' where address is 'Pune'
update student 
set address='Mumbai' 
where address='Pune'

-- update -- when we need to change some data in a table 
update person
set DOB = '2008-09-10'
where PID = 4 
GO

-- NULL is a special charected and we need special operator 
select * from student where age IS null
select * from student where age IS NOT null
GO
-- remove age details where gender is female 
update student 
set age = NULL 
where gender='F'
GO
-- update age with 0 where the value of age is NULL
update student 
set age=0 
where age is null;
GO

update Person
set DOB = '2000-01-01'
where DOB IS NULL 
GO
update Person
set Name = 'Mohan'
where name = 'Mahesh'
GO
update Person
set Name = 'Ankan', Address = 'Pune'
where name = 'Amit'
GO
update person
set DOB = NULL
where DOB = '2000-01-01'
GO
update person
set DOB = NULL 
WHERE Name = 'Ankan' AND Address = 'Pune' 
GO
update person
set DOB = NULL 
WHERE Name = 'Mohan' OR Address = 'Pune' 
GO
update person
set PID = 11 
WHERE PID = 10
GO
update person 
set address = 'Pune' 
where address = 'Pune11' 
GO
update person 
set dob = NULL, name = NULL
where name = 'dk' and dob='1989-10-13' 
GO



-- delete -- when we need to remove some data from the table

-- remove the record where student id is 5
delete from student where id = 5

-- remove the records where address is chennai 
delete from student where address = 'Chennai'

-- remove the records of student where age is not 0
Delete from student where age <> 0



delete from person 
where PID = 11
GO
delete from person
where address = 'Ranchi' 
GO
delete from person where pid=2 OR pid=7
GO
delete from person where pid in (4,6,8)
GO
delete from person where DOB is null
GO
delete from person
GO




-- difference between delete and truncate
delete					truncate 
DML						DDL
support where			no where
reversable/ rollback	no rollback
logs transaction entry  does not logs transaction
slower in nature        faster than delete 


data -- it holds the data 
log  -- it holds the associated information of the data


account balance - 100 -- data file
transaction +25 at 10:30 pm by user 'xyz' on database 'TestDB' table 'Account' -- log file
account balance - 125 -- data file 




-- How we can insert data into a from from a different table
-- PID 2 & 5 got a job and would be a part of employee table
insert into employee -- values syntax is not used here 
select PID, Name from person where PID in (2,5)
GO
-- PID 3 got a job and would be a part of employee table
insert into employee
select PID, Name from person where PID = 3
GO

-- Access table from a different database
select * from demo.dbo.Employee
select * from dbo.Employee
-- schema is a logical seperator of tables
-- you may have different depertment in a company
-- for different department you can use different schema for better managibility 

-- instance/ server
-- database
-- schema (default schema is dbo)
-- tables
CREATE Schema HR
create table hr.test
(
ID int, 
name varchar(12)
)












Class-5: Practicals 
---------------------------

-- Join operations
-- what? to map two or more decomposed table into one output
-- why? to get required information from multiple tables
-- how? using join operators (Inner, Left, Right and Full join) 


-- please show employee name, age, department and location
select e.id, e.Name, e.age, e.Dept, d.Location from 
employee as e
INNER JOIN 
Department as d
ON e.dept = d.name
where e.age > 30


select 
t1.Name as EmployeeName, 
t1.Salary as EmployeeSalary, 
t1.Age as EmplyeeAge, 
t2.Location as EmployeeLocation
from 
employee as t1
INNER JOIN 
Department as t2
ON t1.dept = t2.name
where t2.Location = 'New York'


select * from 
dbo.employee as t1
LEFT JOIN 
dbo.Department as t2
ON t1.dept = t2.name
GO

select * from 
dbo.employee as t1
RIGHT JOIN 
dbo.Department as t2
ON t1.dept = t2.name
GO

select * from 
dbo.employee as t1
FULL JOIN 
dbo.Department as t2
ON t1.dept = t2.name
GO


-- show me employee ID, Name, Salary, Age of Mumbai
select employee.ID, employee.Name, employee.Salary, employee.Age
from  employee INNER JOIN  Department
on employee.dept = Department.Name
where Department.Location = 'Mumbai' 

-- Class Example 
-- please show customer name, mobile, item, amount
Select c.name,c.mobile,o.item,o.amount from 
Customerdetails as c
Inner join
Orderdetails as o
On c.cid = o.cid

select e.ID, e.Name as E_Name, e.Salary, d.Location, d.Name as D_Name
from employee as e
INNER JOIN 
Department as d
ON e.dept = d.name
where e.salary > 7000

select * 
from employee as e  INNER JOIN Department as d
ON e.dept = d.name

select * 
from employee as e  LEFT JOIN Department as d
ON e.dept = d.name

select * 
from employee as e  RIGHT JOIN Department as d
ON e.dept = d.name

select * 
from employee as e  FULL JOIN Department as d
ON e.dept = d.name


select e.ID as e_id, e.Name as e_name, e.Age as e_age, d.Location as d_location
from employee as e
INNER JOIN 
Department as d
ON e.dept = d.name
where e.Gender = 'F' AND d.Location = 'Kolkata'
GO

select employee.ID as e_id, Employee.name as e_name, Employee.Age as e_age, Department.Location as d_location
from employee 
INNER JOIN 
Department 
ON Employee.dept = Department.name
where Employee.Gender = 'F' AND Department.Location = 'Kolkata'
GO






